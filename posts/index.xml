<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Twor</title>
    <link>https://twor.me/posts/</link>
    <description>Recent content in Posts on Twor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jun 2022 17:52:20 +0800</lastBuildDate><atom:link href="https://twor.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go 安装与配置和常用命令</title>
      <link>https://twor.me/posts/go_note/</link>
      <pubDate>Sat, 18 Jun 2022 17:52:20 +0800</pubDate>
      
      <guid>https://twor.me/posts/go_note/</guid>
      <description>go 安装与配置 安装 sudo pacman -S go 也可以使用goup安装器安装
配置 #编辑 env 文件 vim .config/go/env 添加下面内容
GO111MODULE=on #开启gomod GOPATH=/angus/Go #设置gopath GOPROXY=https://goproxy.cn,direct #设置goproxy(代理源) 查看环境变量
go env # 查看gomod gopath goproxy是否设置正确 gopath GOPATH 是 Go语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录，所下载的包都保留在gopath指向的目录
goproxy源 # 1. 七牛 CDN go env -w GOPROXY=https://goproxy.cn,direct # 2. 阿里云 go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct # 3. 官方 go env -w GOPROXY=https://goproxy.io,direct 常用命令 包管理 go mod init # 初始化包管理配置，这一步会在module根目录下生成go.mod文件 go mod tidy # 更新包管理配置go.mod(去掉无用module, 新增必要module) go get -u github.</description>
    </item>
    
    <item>
      <title>我的 Linux 软件清单</title>
      <link>https://twor.me/posts/linux_apps/</link>
      <pubDate>Sun, 08 May 2022 16:29:35 +0800</pubDate>
      
      <guid>https://twor.me/posts/linux_apps/</guid>
      <description>Nautilus 它是GNOME的文件管理器。比较好用，简洁图形化操作
ranger Ranger是具有VI键绑定的控制台文件管理器
obs-studio OBS Studio是为高效捕获，合成，编码，记录和流传输视频内容而设计的软件。
feh 快速轻巧的图像查看器
vim 编辑器
vscode 微软出品的代码编辑器
musicbox 网易云音乐命令行版本
simplenote 笔记本
https://aur.archlinux.org/packages/notion-app/
fcitx5-rime 中文输入法
i3-gaps 平铺窗口管理器
clash 代理/翻墙
mpv 视频播放器
rofi Rofi：窗口切换器，应用程序启动器和dmenu替换
chromium 浏览器
dunst 轻量级和可自定义的通知守护程序
indicator-stickynotes 指标便利贴：适用于Ubuntu桌面的便利贴
drawing 一个画图小工具
termite 以键盘为中心的基于VTE的终端，旨在在窗口管理器中使用，支持平铺和/或跳格。
zsh 很好用的一个shll
oh-my-zsh 社区驱动的框架，用于管理zsh配置。
fzf 命令行模糊查找器
Nordic-darker Gtk3.20 +主题
ePapirus Linux的Papirus图标主题
Citrus-purple-dark Linux桌面图标主题
Cantarell 很好看的字体
Cascadia Code 写代码和终端用的字体
polybar 快速且易于使用的状态栏
picom X11的窗口修改器
picom-tryone-git picom的修改版，具有模糊效果
lxappearance-gtk3 LXDE桌面的功能丰富的GTK +主题切换器
https://www.archlinux.org/packages/community/x86_64/lxappearance/
translate-shell 终端翻译工具，可以发音
scrcpy 连接控制手机</description>
    </item>
    
    <item>
      <title>搭建自定义域名的本地HTTPS开发服务器</title>
      <link>https://twor.me/posts/local_https/</link>
      <pubDate>Mon, 18 Oct 2021 16:27:34 +0800</pubDate>
      
      <guid>https://twor.me/posts/local_https/</guid>
      <description>mkcert简介 mkcert是一个使用go语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建https环境使用。
安装方式也非常简单，由于go语言的静态编译和跨平台的特性，官方提供各平台预编译的版本，直接下载到本地，给可执行权限(Linux/Unix需要)就可以了。下载地址:
项目地址：[https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)
安装mkcert macOS 1. Homebrew
brew install mkcert brew install nss # if you use Firefox 2. MacPorts.
sudo port selfupdate sudo port install mkcert sudo port install nss # if you use Firefox Linux 首先安装 certutil. sudo apt install libnss3-tools -or- sudo yum install nss-tools -or- sudo pacman -S nss -or- sudo zypper install mozilla-nss-tools 然后安装 mkcert Linuxbrew
brew install mkcert 或者自己编译 (requires Go 1.13+)
git clone https://github.</description>
    </item>
    
    <item>
      <title>ArchLinux 触摸板手势调教</title>
      <link>https://twor.me/posts/archlinux_gesture/</link>
      <pubDate>Sun, 21 Mar 2021 23:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/archlinux_gesture/</guid>
      <description>WIKI 比不上 Mac 的强大，简单的自定义，适合自己舒适就好。
OS：Archlinux WM：i3wm 首先看一看wiki
警告: xf86-input-synaptics 已经停止维护，请尽量使用 libinput。如果想要在 Xorg 上 安装 libinput，使用 xf86-input-libinput 包。此包允许 libinput 在 X 上作为驱动使用。此驱动会代替 evdev 和 synaptics 运行
所以我们就需要安装 xf86-input-libinput 包
安装触摸板驱动 sudo pacman -S xf86-input-libinput 自定义配置文件应放在 /etc/X11/xorg.conf.d/ 中，并且通常选择被广泛使用的命名模式 30-touchpad.conf 作为文件名
sudo vim /etc/X11/xorg.conf.d/30-touchpad.conf Section &amp;#34;InputClass&amp;#34; Identifier &amp;#34;touchpad&amp;#34; Driver &amp;#34;libinput&amp;#34; MatchIsTouchpad &amp;#34;on&amp;#34; Option &amp;#34;Tapping&amp;#34; &amp;#34;on&amp;#34; Option &amp;#34;TappingButtonMap&amp;#34; &amp;#34;lmr&amp;#34; EndSection 写入配置之后记得重新启动一下
配置触摸板手势 安装配置 libinput-gestures 要使用 libinput-gestures, 请安装 libinput-gestures。 你能使用很多系统级别的手势操作，也能自定义配置文件。详情请看 README 。
sudo pacman -S libinput-gestures libinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input</description>
    </item>
    
    <item>
      <title>我的Windows终端配置</title>
      <link>https://twor.me/posts/windows_terminal/</link>
      <pubDate>Tue, 18 Aug 2020 16:24:27 +0800</pubDate>
      
      <guid>https://twor.me/posts/windows_terminal/</guid>
      <description>安装Git 下载
配置主题 打开 Git Bash
$ git clone xxxx $ cd xxxx $ cp .minttyrc ~ &amp;amp;&amp;amp; cp git-prompt.sh /etc/profile.d 安装 Tmux $ git clone https://github.com/hongwenjun/tmux_for_windows.git $ cd tmux_for_windows/ $ unzip -x tmux_for_git-bash.zip -d / tmux 启用鼠标操作 .tmux.conf 设定 # https://www.youtube.com/watch?v=xTplsyQaGFs # tmux 启用鼠标操作 setw -g mouse set-option -g history-limit 20000 set-option -g mouse on bind -n WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M bind -n WheelDownPane select-pane -t= \; send-keys -M 安装 wget 和 tree 命令 $ cp tools/* /usr/bin 其它 在 VSCode 中配置 Git Bash 在 VSCode 中使用 Git Bash 只需要在 Settings.</description>
    </item>
    
    <item>
      <title>Linux上优雅的控制手机(水群)</title>
      <link>https://twor.me/posts/linux_android/</link>
      <pubDate>Sat, 07 Mar 2020 13:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/linux_android/</guid>
      <description>本文以ArchLinux为例
手机控制 Scrcpy 安装 Scrcpy $ sudo pacman -S scrcpy #pacman会安装依赖包 android-tools #其他发行版如果没有请自行安装 查看设备ID 首先用数据线连接上你的电脑和手机，在终端输入 adb devices 查看设备ID，其中 4dcb9ad5 为设备ID
$ adb devices * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached 4dcb9ad5	no permissions; see [http://developer.android.com/tools/device.html] 连接控制手机 $ sudo -b scrcpy -s 4dcb9ad5 --turn-screen-off ## 在后台并让手机保持熄屏运行 --turn-screen-off 让手机保持熄屏状态 如果不出意外，你的电脑应该可以直接显示和控制你的手机，但是这样手机就没法离电脑太远，如果你想要自由活动，往下看。
保持手机和电脑在同一局域网，使用 adb tcpip 5555 命令。如果出现错误请打开 网络ADB调试 和 开启USB文件传输模式
$ adb tcpip 5555 ## 如果出现下面错误，请打开 网络ADB调试 和 开启USB文件传输模式 error: insufficient permissions for device See [http://developer.</description>
    </item>
    
    <item>
      <title>linux 编译安装php</title>
      <link>https://twor.me/posts/linux_build_php/</link>
      <pubDate>Mon, 20 Jan 2020 16:41:18 +0800</pubDate>
      
      <guid>https://twor.me/posts/linux_build_php/</guid>
      <description>sudo pacman -Syu sudo pacman -S wget #自己指定版本下载 wget http://php.net/distributions/php-7.1.23.tar.gz tar xvf php-7.1.23.tar.gz cd php-7.1.23 sudo pacman -S gcc make bison gawk re2c libxml2 libwebp freetype2 c-client libmcrypt libxslt ./configure --prefix=/opt/php --with-config-file-path=/opt/php/etc --with-zlib-dir --with-freetype-dir --enable-mbstring --with-libxml-dir=/usr --enable-soap --enable-calendar --with-curl --with-mcrypt --with-zlib --with-gd --disable-rpath --enable-inline-optimization --with-bz2 --with-zlib --enable-sockets --enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex --enable-exif --enable-bcmath --with-mhash --enable-zip --with-pcre-regex --with-pdo-mysql --with-mysqli --with-mysql-sock=/var/run/mysqld/mysqld.sock --with-jpeg-dir=/usr --with-png-dir=/usr --enable-gd-native-ttf --with-openssl --with-fpm-user=http --with-fpm-group=http --enable-ftp --with-imap --with-imap-ssl --with-kerberos --with-gettext --with-xmlrpc --with-xsl --enable-opcache --enable-fpm # 最后 make &amp;amp;&amp;amp; sudo make install 如果出现 error: freetype-config not found.</description>
    </item>
    
    <item>
      <title>Docker：宿主机Nginx访问docker中的php</title>
      <link>https://twor.me/posts/docker_php/</link>
      <pubDate>Fri, 18 Oct 2019 16:32:25 +0800</pubDate>
      
      <guid>https://twor.me/posts/docker_php/</guid>
      <description>使用宿主机nginx搭配docker多版本php。
docker 镜像获取 docker pull php:7.1-fpm 创建容器 docker run -d --name php -p 9056:9000 -v /srv/http:/var/www/html --privileged=true php:7.1-fpm #参数说明： -name php 容器名称为 `php` -p 9056:9000 宿主机的9056端口映射到容器的9000端口 -v /srv/http:/var/www/html 宿主机的 `/srv/http` 目录挂载到容器的 `/var/www/html` 目录下 宿主机Nginx 配置 server { listen 10064; set $base /var/www/html/member-benefits; root $base/backend/public; add_header X-Frame-Options &amp;#34;SAMEORIGIN&amp;#34;; add_header X-XSS-Protection &amp;#34;1; mode=block&amp;#34;; add_header X-Content-Type-Options &amp;#34;nosniff&amp;#34;; charset utf-8; index index.html index.htm index.php; location / { if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; } } location = /favicon.</description>
    </item>
    
    <item>
      <title>Git命令进阶—删除隐私 同步fork pull request 和merge</title>
      <link>https://twor.me/posts/git_bash_tip/</link>
      <pubDate>Wed, 05 Jun 2019 13:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/git_bash_tip/</guid>
      <description>在开发的时候，为了测试数据，总会连接一些数据库、服务器、API之类，提交的时候就会不小心泄漏我们的SSH key、密码或者token之类的东西，所以有必要掌握 Git删除隐私。
删除隐私 错误的做法：如果发现不小心上传了隐私信息，修改或删除相应的文件 原因：git是可以查看历史提交的，所以只需要查看历史提交，相应的隐私信息还是会暴露
删厍？当我没说
git filter-branch 所有的历史记录中删除某个文件/文件夹 yourfilepath 就是需要删除的那个文件/文件夹
$ git filter-branch --force --index-filter &amp;#39;git rm -r --cached --ignore-unmatch yourfilepath&amp;#39; --prune-empty --tag-name-filter cat -- --all $ git push origin master --force 此时再看看 git log 应该是没有该文件的信息了。
请参考：https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository
同步fork代码 clone fork的分支到本地
$ git clone git@github.com:*/flutter.git 增加源分支(被自己fork的项目)地址到自己git项目远程分支列表中，将原来的仓库命名为upstream
$ git remote add upstream git@github.com:flutter/flutter.git 核实远程分支列表（optional）
$ git remote -v origin git@github.com:*/flutter.git (fetch) origin git@github.com:*/flutter.git (push) upstream git@github.com:flutter/flutter.git (fetch) upstream git@github.com:flutter/flutter.git (push) ## 核实后，发现不如意，想删除，可以用 git remote remove name ## name 为远程分支的命名，如上面例子，可以删除 upstream ## git remote remove upstream ## 或者直接删除之前fork的原始分支 origin ## git remote remove origin (直接删除了原始分支后，再fork， ## 也能达到更新了最新代码的需求，后面的步骤就不用了。) fetch源分支的新版本到本地</description>
    </item>
    
    <item>
      <title>Oh-my-zsh 配置美化（vscode乱码解决）</title>
      <link>https://twor.me/posts/oh-my-zsh_config/</link>
      <pubDate>Wed, 05 Jun 2019 13:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/oh-my-zsh_config/</guid>
      <description>安装 zsh oh-my-zsh-git pacaur -S zsh oh-my-zsh-git 修改用户shell chsh -l chsh -s /usr/bin/zsh 安装Powerlevel9k 主题 $ sudo git clone https://github.com/bhilburn/powerlevel9k.git /usr/share/oh-my-zsh/themes/powerlevel9k 安装Nerd Fonts Hack字体 pacaur -S nerd-fonts-hack .zshrc 配置（copy） # Path to your oh-my-zsh installation. ZSH=/usr/share/oh-my-zsh/ export DEFAULT_USER=&amp;#34;fernando&amp;#34; export TERM=&amp;#34;xterm-256color&amp;#34; export ZSH=/usr/share/oh-my-zsh ZSH_THEME=&amp;#34;powerlevel9k/powerlevel9k&amp;#34; POWERLEVEL9K_MODE=&amp;#34;nerdfont-complete&amp;#34; source $ZSH/themes/powerlevel9k/powerlevel9k.zsh-theme POWERLEVEL9K_FOLDER_ICON=&amp;#34;&amp;#34; POWERLEVEL9K_HOME_SUB_ICON=&amp;#34;$(print_icon &amp;#34;HOME_ICON&amp;#34;)&amp;#34; POWERLEVEL9K_DIR_PATH_SEPARATOR=&amp;#34; $(print_icon &amp;#34;LEFT_SUBSEGMENT_SEPARATOR&amp;#34;) &amp;#34; POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0 POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER=true POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=&amp;#39;black&amp;#39; POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND=&amp;#39;178&amp;#39; POWERLEVEL9K_NVM_BACKGROUND=&amp;#34;238&amp;#34; POWERLEVEL9K_NVM_FOREGROUND=&amp;#34;green&amp;#34; POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND=&amp;#34;blue&amp;#34; POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND=&amp;#34;015&amp;#34; POWERLEVEL9K_TIME_BACKGROUND=&amp;#39;255&amp;#39; #POWERLEVEL9K_COMMAND_TIME_FOREGROUND=&amp;#39;gray&amp;#39; POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=&amp;#39;245&amp;#39; POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=&amp;#39;black&amp;#39; POWERLEVEL9K_TIME_FORMAT=&amp;#34;%D{%H:%M}&amp;#34; POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator context dir dir_writable vcs) POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs command_execution_time time) POWERLEVEL9K_SHOW_CHANGESET=true HYPHEN_INSENSITIVE=&amp;#34;true&amp;#34; COMPLETION_WAITING_DOTS=&amp;#34;true&amp;#34; # /!</description>
    </item>
    
    <item>
      <title>Git 自动化部署网站</title>
      <link>https://twor.me/posts/git_auto_web/</link>
      <pubDate>Wed, 05 Jun 2019 09:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/git_auto_web/</guid>
      <description>安装配置Git服务端 $ sudo yum install git $ sudo adduser git $ su git $ cd $ mkdir .ssh &amp;amp;&amp;amp; chmod 700 .ssh $ touch .ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 .ssh/authorized_keys 写入SSH公匙 接着，我们需要为系统用户 git 的 authorized_keys 文件添加一些开发者 SSH 公钥。
$ vim .ssh/authorized_keys $ #写入SSH公匙 创建仓库 现在我们来为开发者新建一个空仓库。可以借助带 --bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：
$ cd /srv/git $ mkdir project.git $ cd project.git $ git init --bare Initialized empty Git repository in /srv/git/project.git/ 禁用git用户shell登录 需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 /etc/passwd 文件中（git 用户所对应）的 shell 值。</description>
    </item>
    
    <item>
      <title>Composer 基本使用</title>
      <link>https://twor.me/posts/php_composer/</link>
      <pubDate>Sat, 01 Jun 2019 16:20:55 +0800</pubDate>
      
      <guid>https://twor.me/posts/php_composer/</guid>
      <description>写在前面 Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。
Composer 不是一个包管理器。是的，它涉及 &amp;ldquo;packages&amp;rdquo; 和 &amp;ldquo;libraries&amp;rdquo;，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。
运行 Composer 需要 PHP 5.3.2+ 以上版本。一些敏感的 PHP 设置和编译标志也是必须的，但对于任何不兼容项安装程序都会抛出警告。
我们将从包的来源直接安装，而不是简单的下载 zip 文件，你需要 git 、 svn 或者 hg ，这取决于你载入的包所使用的版本管理系统
安装Composer $ curl -sS https://getcomposer.org/installer | php $ sudo mv composer.phar /usr/local/bin/composer #archlinux #sudo pacman -S composer 修改Composer镜像源 #中国全量镜像 $ composer config -g repo.packagist composer https://packagist.phpcomposer.com #阿里云全量镜像 $ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #解除镜象 $ composer config -g --unset repos.packagist Composer使用 包的安装、更新下载和依赖 #如有 composer.</description>
    </item>
    
    <item>
      <title>Windows上安装ngixn php并添加服务自启动</title>
      <link>https://twor.me/posts/windows_nginx_php/</link>
      <pubDate>Sun, 05 May 2019 13:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/windows_nginx_php/</guid>
      <description>环境准备 Nginx
php
winsw
安装Ngixn服务 把下载的winsw放入ngixn安装文件夹，重命名为nginx-service.exe,新建nginx-service.xml,写入配置
&amp;lt;service&amp;gt; &amp;lt;id&amp;gt;nginxsvc&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Nginx&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Nginx Web Server service.&amp;lt;/description&amp;gt; &amp;lt;executable&amp;gt;c:\nginx\nginx.exe&amp;lt;/executable&amp;gt; &amp;lt;logpath&amp;gt;c:\nginx\logs\&amp;lt;/logpath&amp;gt; &amp;lt;logmode&amp;gt;roll&amp;lt;/logmode&amp;gt; &amp;lt;depend&amp;gt;phpsvc&amp;lt;/depend&amp;gt; &amp;lt;startargument&amp;gt;-p&amp;lt;/startargument&amp;gt; &amp;lt;startargument&amp;gt;c:\nginx&amp;lt;/startargument&amp;gt; &amp;lt;stopexecutable&amp;gt;c:\nginx\nginx.exe&amp;lt;/stopexecutable&amp;gt; &amp;lt;stopargument&amp;gt;-p&amp;lt;/stopargument&amp;gt; &amp;lt;stopargument&amp;gt;c:\nginx&amp;lt;/stopargument&amp;gt; &amp;lt;stopargument&amp;gt;-s&amp;lt;/stopargument&amp;gt; &amp;lt;stopargument&amp;gt;stop&amp;lt;/stopargument&amp;gt; &amp;lt;/service&amp;gt; 以管理员身份打开cmd，运行
cd \c:\svc\nginx nginx-service.exe install 安装PHP服务
winsw改为php-service.exe,放入php安装文件夹，写入配置php-service.xml
&amp;lt;service&amp;gt; &amp;lt;id&amp;gt;phpsvc&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;PHP&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;PHP-FCGI service.&amp;lt;/description&amp;gt; &amp;lt;executable&amp;gt;c:\php\php-cgi.exe&amp;lt;/executable&amp;gt; &amp;lt;logpath&amp;gt;c:\php\logs\&amp;lt;/logpath&amp;gt; &amp;lt;logmode&amp;gt;roll&amp;lt;/logmode&amp;gt; &amp;lt;depend&amp;gt;&amp;lt;/depend&amp;gt; &amp;lt;startargument&amp;gt;-b&amp;lt;/startargument&amp;gt; &amp;lt;startargument&amp;gt;127.0.0.1:9123&amp;lt;/startargument&amp;gt; &amp;lt;startargument&amp;gt;-c&amp;lt;/startargument&amp;gt; &amp;lt;startargument&amp;gt;C:\php\php.ini&amp;lt;/startargument&amp;gt; &amp;lt;/service&amp;gt; 以管理员身份打开cmd，运行
cd \c:\svc\php php-service.exe install 修改nginx.conf
worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; location / { root html; index index.</description>
    </item>
    
    <item>
      <title>WSL(Windows Subsystem for Linux)安装archlinux，并配置图形化界面</title>
      <link>https://twor.me/posts/wsl_archlinux_gui/</link>
      <pubDate>Tue, 05 Mar 2019 13:58:53 +0800</pubDate>
      
      <guid>https://twor.me/posts/wsl_archlinux_gui/</guid>
      <description>开启wsl Windows功能 &amp;raquo; 勾选适用于Linux的Windows子系统 ，重启生效。
下载安装 Arch WSL 这里是作者的安装教程：https://github.com/yuk7/ArchWSL/wiki
我选择的是传统方式安装 (不使用 AppX 方式)：
在 Release 下载最新版的 Arch.zip 解压到 C 盘根目录，(一定要在 C 盘，其他位置也可以)，但是你要有该目录的读写权限，所以不能放到 Program Files 等目录中。 双击解压好的 Arch.exe 进行安装，这个 .exe 的名字 就是要创建的 WSL 实例的名字，改不同的名字就能创建多个 Arch WSL。 安装好之后，进行配置。
Arch Linux 软件仓库国内镜像 编辑 /etc/pacman.d/mirrorlist，里面有注释了的 China 的镜像，（放在上面优先级高）
然后更新软件包缓存，执行： pacman -Syyu
其他跟镜像有关的可以看这里：https://wiki.archlinux.org/index.php/Mirrors_(简体中文)
添加 ArchlinuxCN 源 Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体 / 美化包等。官方仓库地址：http://repo.archlinuxcn.org
使用方法：在 /etc/pacman.conf 文件末尾添加以下两行：
[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 之后安装 archlinuxcn-keyring 包导入 GPG key:</description>
    </item>
    
    <item>
      <title>git 笔记</title>
      <link>https://twor.me/posts/git_note/</link>
      <pubDate>Thu, 18 Oct 2018 16:49:37 +0800</pubDate>
      
      <guid>https://twor.me/posts/git_note/</guid>
      <description>设置用户信息 git config --global user.email &amp;#34;840833458@qq.com&amp;#34; //这是设置邮箱 git config --global user.name &amp;#34;Twor&amp;#34; //这是设置用户名 设置gitee ssh-keygen -t rsa -C &amp;#34;840833458@qq.com&amp;#34; //生成密钥 然后把生成在 用户文件夹 下 .ssh/xxxxx.pub 的文件内容复制到 gitee 添加ssh key 的地方
ssh -T git@gitee.com //测试连接 Hi twor! You&amp;rsquo;ve successfully authenticated, but GITEE.COM does not provide shell access. //输出这样内容就表示成功了
git 操作 git add . // 表示把所有修改和添加的内容添加到暂缓区 git commit -m &amp;#34;这是twor修改的东西&amp;#34; //表示提交暂缓区的内容并添加备注 git push origin master //推送提交到 远程 master 分支 git pull origin master //拉取远程 master 分支到本地 git将当前修改提交至其他分支 在没有进行commit之前可以进行一下操作</description>
    </item>
    
  </channel>
</rss>
