[{"content":"go 安装与配置 安装 sudo pacman -S go 也可以使用goup安装器安装\n配置 #编辑 env 文件 vim .config/go/env 添加下面内容\nGO111MODULE=on #开启gomod GOPATH=/angus/Go #设置gopath GOPROXY=https://goproxy.cn,direct #设置goproxy(代理源) 查看环境变量\ngo env # 查看gomod gopath goproxy是否设置正确 gopath GOPATH 是 Go语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录，所下载的包都保留在gopath指向的目录\ngoproxy源 # 1. 七牛 CDN go env -w GOPROXY=https://goproxy.cn,direct # 2. 阿里云 go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct # 3. 官方 go env -w GOPROXY=https://goproxy.io,direct 常用命令 包管理 go mod init # 初始化包管理配置，这一步会在module根目录下生成go.mod文件 go mod tidy # 更新包管理配置go.mod(去掉无用module, 新增必要module) go get -u github.com/hashicorp/memberlist # 添加包依赖 go mod edit -replace github.com/hashicorp/memberlist =\u0026gt; github.com/pilosa/memberlist@v0.1.4-0.20190415211605-f6512523c021 # 替换依赖库。但是module中的代码扔可以原依赖库的方式使用新依赖库。 编译 go build # 编译当前目录所在package go build -o \u0026lt;bin\u0026gt; main.go # 编译代码并指定输出二进制文件 go build -gcflags \u0026#34;-N -l\u0026#34; main.go # 编译时关闭内联优化 go clean #删除编译生成的可执行文件 测试 # 读取源码目录下面名为 *_test.go 的文件，生成并运行测试用的可执行文件 go test ./... # 运行module下所有单测。一个module对应一个go.mod文件 go test . # 运行package下所有单测。一个package对应一个目录 go test -v . # 添加verbose信息，会输出日志等信息 go test -run=`\u0026lt;regexp\u0026gt; `. # 运行符合正则表达式的的单测 go test -bench -run=None # 运行基准测试 调试 # 需要安装dlv go install github.com/go-delve/delve/cmd/dlv@latest dlv exec \u0026lt;bin\u0026gt; -- arg1 arg2 ... # 调试运行binary文件 dlv test . # 调试当前module的测试代码 dlv attach \u0026lt;pid\u0026gt; # 调试正在运行的进程 dlv core `\u0026lt;bin\u0026gt;` `\u0026lt;core\u0026gt;` # 调试core文件 # 远程调试 dlv attach \u0026lt;pid\u0026gt; --headless --api-version=2 --log --listen=:8181 ## server端 dlv connect \u0026lt;server_host\u0026gt;:8181 ## client端 调优 go tool pprof http://host:port/debug/pprof/profile # 通过net/http/pprof采集profile并下载到本地 go tool pprof -\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt; \u0026lt;profile_file\u0026gt; # 通过浏览器查看profile. ","date":"2022-06-18T17:52:20+08:00","permalink":"https://twor.me/posts/go_note/","tags":["Go"],"title":"go 安装与配置和常用命令"},{"content":"Nautilus 它是GNOME的文件管理器。比较好用，简洁图形化操作\nranger Ranger是具有VI键绑定的控制台文件管理器\nobs-studio OBS Studio是为高效捕获，合成，编码，记录和流传输视频内容而设计的软件。\nfeh 快速轻巧的图像查看器\nvim 编辑器\nvscode 微软出品的代码编辑器\nmusicbox 网易云音乐命令行版本\nsimplenote 笔记本\nhttps://aur.archlinux.org/packages/notion-app/\nfcitx5-rime 中文输入法\ni3-gaps 平铺窗口管理器\nclash 代理/翻墙\nmpv 视频播放器\nrofi Rofi：窗口切换器，应用程序启动器和dmenu替换\nchromium 浏览器\ndunst 轻量级和可自定义的通知守护程序\nindicator-stickynotes 指标便利贴：适用于Ubuntu桌面的便利贴\ndrawing 一个画图小工具\ntermite 以键盘为中心的基于VTE的终端，旨在在窗口管理器中使用，支持平铺和/或跳格。\nzsh 很好用的一个shll\noh-my-zsh 社区驱动的框架，用于管理zsh配置。\nfzf 命令行模糊查找器\nNordic-darker Gtk3.20 +主题\nePapirus Linux的Papirus图标主题\nCitrus-purple-dark Linux桌面图标主题\nCantarell 很好看的字体\nCascadia Code 写代码和终端用的字体\npolybar 快速且易于使用的状态栏\npicom X11的窗口修改器\npicom-tryone-git picom的修改版，具有模糊效果\nlxappearance-gtk3 LXDE桌面的功能丰富的GTK +主题切换器\nhttps://www.archlinux.org/packages/community/x86_64/lxappearance/\ntranslate-shell 终端翻译工具，可以发音\nscrcpy 连接控制手机\nsyncthing 文件同步\ngotohttp 远程网页端控制\nhttps://gotohttp.com/\ninsomnia api 调试\ninsomnia\n数据库管理\nbeekeeper studio\n","date":"2022-05-08T16:29:35+08:00","permalink":"https://twor.me/posts/linux_apps/","tags":["Linux"],"title":"我的 Linux 软件清单"},{"content":"mkcert简介 mkcert是一个使用go语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建https环境使用。\n安装方式也非常简单，由于go语言的静态编译和跨平台的特性，官方提供各平台预编译的版本，直接下载到本地，给可执行权限(Linux/Unix需要)就可以了。下载地址:\n项目地址：[https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)\n安装mkcert macOS 1. Homebrew\nbrew install mkcert brew install nss # if you use Firefox 2. MacPorts.\nsudo port selfupdate sudo port install mkcert sudo port install nss # if you use Firefox Linux 首先安装 certutil. sudo apt install libnss3-tools -or- sudo yum install nss-tools -or- sudo pacman -S nss -or- sudo zypper install mozilla-nss-tools 然后安装 mkcert Linuxbrew\nbrew install mkcert 或者自己编译 (requires Go 1.13+)\ngit clone https://github.com/FiloSottile/mkcert \u0026amp;\u0026amp; cd mkcert go build -ldflags \u0026#34;-X main.Version=$(git describe --tags)\u0026#34; 也可以下载编译好的包 the pre-built binaries.\nArch Linux , [mkcert](https://www.archlinux.org/packages/community/x86_64/mkcert/) sudo pacman -Syu mkcert Windows 1.Chocolatey\nchoco install mkcert Scoop scoop bucket add extras scoop install mkcert 也可以下载编译好的包 the pre-built binaries\n生成证书 需要首先在系统信任库中安装本地CA.\n$ mkcert -install ~ Using the local CA at \u0026#34;/home/angus/.local/share/mkcert\u0026#34; ✨ The local CA is already installed in the system trust store! 👍 The local CA is already installed in the Firefox and/or Chrome/Chromium trust store! 👍 完成后，您可以开始为您的域生成SSL证书。例如，我将生成一个对以下名称有效的新证书：\n$ mkcert myapp.net mkcert localhost ~/.ssl Using the local CA at \u0026#34;/home/angus/.local/share/mkcert\u0026#34; ✨ Created a new certificate valid for the following names 📜 - \u0026#34;myapp.net\u0026#34; The certificate is at \u0026#34;./myapp.net.pem\u0026#34; and the key at \u0026#34;./myapp.net-key.pem\u0026#34; ✅ 测试mkcert证书 现在让我们使用一个简单的Nginx配置文件测试mkcert证书。\n创建一个简单的网页 # cat /etc/nginx/conf.d/test.conf server { listen 80; server_name localhost; root /var/www/test; } server { listen *:443 ssl http2; root /var/www/test; server_name localhost; ssl_certificate /home/angus/localhost.pem; ssl_certificate_key /home/angus/localhost-key.pem; } 确保/etc/hosts文件包含已使用域的记录。\n127.0.0.1 myapp.net 打开浏览器并使用提供的域名，你应该得到一个绿色栏。\n","date":"2021-10-18T16:27:34+08:00","permalink":"https://twor.me/posts/local_https/","tags":["Https"],"title":"搭建自定义域名的本地HTTPS开发服务器"},{"content":"WIKI 比不上 Mac 的强大，简单的自定义，适合自己舒适就好。\nOS：Archlinux WM：i3wm 首先看一看wiki\n警告: xf86-input-synaptics 已经停止维护，请尽量使用 libinput。如果想要在 Xorg 上 安装 libinput，使用 xf86-input-libinput 包。此包允许 libinput 在 X 上作为驱动使用。此驱动会代替 evdev 和 synaptics 运行\n所以我们就需要安装 xf86-input-libinput 包\n安装触摸板驱动 sudo pacman -S xf86-input-libinput 自定义配置文件应放在 /etc/X11/xorg.conf.d/ 中，并且通常选择被广泛使用的命名模式 30-touchpad.conf 作为文件名\nsudo vim /etc/X11/xorg.conf.d/30-touchpad.conf Section \u0026#34;InputClass\u0026#34; Identifier \u0026#34;touchpad\u0026#34; Driver \u0026#34;libinput\u0026#34; MatchIsTouchpad \u0026#34;on\u0026#34; Option \u0026#34;Tapping\u0026#34; \u0026#34;on\u0026#34; Option \u0026#34;TappingButtonMap\u0026#34; \u0026#34;lmr\u0026#34; EndSection 写入配置之后记得重新启动一下\n配置触摸板手势 安装配置 libinput-gestures 要使用 libinput-gestures, 请安装 libinput-gestures。 你能使用很多系统级别的手势操作，也能自定义配置文件。详情请看 README 。\nsudo pacman -S libinput-gestures libinput-gestures的文档中说了：必须是input组的成员才能具有读取触摸板设备的权限，所以需要添加用户到input\nsudo gpasswd -a $USER input 退出登录后生效（或者重启）\n安装配置 xdotool wmctrl 然后安装需要的包\nsudo pacman -S xdotool wmctrl 写入配置文件\nvim .config/libinput-gestures.conf gesture swipe left 4 xdotool key super+Ctrl+Left # 4指左划: 切换到左侧工作区 gesture swipe right 4 xdotool key super+Ctrl+Right # 4指右划: 切换到右侧工作区 gesture swipe up 4 xdotool key super+s # 4指上划: 堆叠窗口 gesture swipe down 4 xdotool key super+d # 4指下划: 还原窗口 gesture pinch in 4 xdotool key super+r # 4指捏: 调整窗口大小 gesture swipe left 3 xdotool key super+Shift+Left # 3指左划: 窗口移动到左边 gesture swipe right 3 xdotool key super+Shift+Right # 3指右划: 窗口移动到右边 gesture swipe up 3 xdotool key super+Shift+space # 3指下划: 浮动切换 gesture swipe down 3 xdotool key super+Shift+space # 3指上划: 浮动切换 gesture pinch in 3 xdotool key super+Shift+q # 3指捏: 关闭窗口 gesture pinch in 2 xdotool key ctrl+minus # 2指捏: 缩小 gesture pinch out 2 xdotool key ctrl+plus # 2指张: 放大% 这里可以根据自己的习惯来搭配，然后启动ibinput-gestures。\nlibinput-gestures-setup autostart libinput-gestures-setup start 演示 \u003c!DOCTYPE HTML\u003e ","date":"2021-03-21T23:58:53+08:00","permalink":"https://twor.me/posts/archlinux_gesture/","tags":["Linux"],"title":"ArchLinux 触摸板手势调教"},{"content":"安装Git 下载\n配置主题 打开 Git Bash\n$ git clone xxxx $ cd xxxx $ cp .minttyrc ~ \u0026amp;\u0026amp; cp git-prompt.sh /etc/profile.d 安装 Tmux $ git clone https://github.com/hongwenjun/tmux_for_windows.git $ cd tmux_for_windows/ $ unzip -x tmux_for_git-bash.zip -d / tmux 启用鼠标操作 .tmux.conf 设定 # https://www.youtube.com/watch?v=xTplsyQaGFs # tmux 启用鼠标操作 setw -g mouse set-option -g history-limit 20000 set-option -g mouse on bind -n WheelUpPane select-pane -t= \\; copy-mode -e \\; send-keys -M bind -n WheelDownPane select-pane -t= \\; send-keys -M 安装 wget 和 tree 命令 $ cp tools/* /usr/bin 其它 在 VSCode 中配置 Git Bash 在 VSCode 中使用 Git Bash 只需要在 Settings.json 中添加如下两行即可，第一行中 bash.exe 的文件路径需要改成自己的，第二行是非必须配置，不配置无法使用 alias。\n{ \u0026#34;terminal.integrated.shell.windows\u0026#34;: \u0026#34;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\u0026#34;, \u0026#34;terminal.integrated.shellArgs.windows\u0026#34;: [\u0026#34;--login\u0026#34;, \u0026#34;-i\u0026#34;] } 解决 win10 快捷键不能秒启动问题 为 Git Bash 设置了全局快捷键后，可能出现按下快捷键后延迟两秒左右终端才打开的现象，只需要在服务中禁用掉 superFetch 即可，此服务在比较新的 win10 上改名为了 sysMain，禁用服务后重启操作系统生效\n终端快捷键 附 Git Bash 终端快捷键\nUntitled\n使用第三方工具 Terminus\n更直接，也很美观 就是打开有点慢\n","date":"2020-08-18T16:24:27+08:00","permalink":"https://twor.me/posts/windows_terminal/","tags":["Linux","Windows","WSL"],"title":"我的Windows终端配置"},{"content":"本文以ArchLinux为例\n手机控制 Scrcpy 安装 Scrcpy $ sudo pacman -S scrcpy #pacman会安装依赖包 android-tools #其他发行版如果没有请自行安装 查看设备ID 首先用数据线连接上你的电脑和手机，在终端输入 adb devices 查看设备ID，其中 4dcb9ad5 为设备ID\n$ adb devices * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached 4dcb9ad5\tno permissions; see [http://developer.android.com/tools/device.html] 连接控制手机 $ sudo -b scrcpy -s 4dcb9ad5 --turn-screen-off ## 在后台并让手机保持熄屏运行 --turn-screen-off 让手机保持熄屏状态 如果不出意外，你的电脑应该可以直接显示和控制你的手机，但是这样手机就没法离电脑太远，如果你想要自由活动，往下看。\n保持手机和电脑在同一局域网，使用 adb tcpip 5555 命令。如果出现错误请打开 网络ADB调试 和 开启USB文件传输模式\n$ adb tcpip 5555 ## 如果出现下面错误，请打开 网络ADB调试 和 开启USB文件传输模式 error: insufficient permissions for device See [http://developer.android.com/tools/device.html] for more information $ adb tcpip 5555 ## 再试一次就成功了 restarting in TCP mode port: 5555 $ adb connect 192.168.1.3:5555 ## 成功连接手机 192.168.1.3 是你手机的ip connected to 192.168.1.3:5555 $ scrcpy -s 192.168.1.3:5555 --turn-screen-off ## 使用scrcpy控制你的手机 ![aZWT41.png](https://s1.ax1x.com/2020/07/29/aZWT41.png\n数据线和WIFI的优势劣势\n数据线：可以小范围移动手机，但是传输画面比WIFI WiFI：可以移动手机，自由活动。但是传输画面不是很好 使用情况 可以双向复制/粘贴 可以使用电脑键盘打字聊天 基本满足日常水群，刷朋友圈 无法电脑截图分享（往下看） 文件同步 安装 syncthing 电脑 $ sudo pacman -S syncthing 手机 https://syncthing.net/downloads/\n开启同步 $ systemctl start syncthing $ systemctl enable syncthing 手机打开即可\n配置 syncthing 自己找摸索一下，找教程看一下，去B站搜，都有教程的\n把电脑截图保存的位置和手机文件夹同步一下，这样你电脑截图的图片就会自动同步到你的手机。这样就可以在手机分享你电脑的截图了\n","date":"2020-03-07T13:58:53+08:00","permalink":"https://twor.me/posts/linux_android/","tags":["Linux","Scrcpy","syncthing"],"title":"Linux上优雅的控制手机(水群)"},{"content":"sudo pacman -Syu sudo pacman -S wget #自己指定版本下载 wget http://php.net/distributions/php-7.1.23.tar.gz tar xvf php-7.1.23.tar.gz cd php-7.1.23 sudo pacman -S gcc make bison gawk re2c libxml2 libwebp freetype2 c-client libmcrypt libxslt ./configure --prefix=/opt/php --with-config-file-path=/opt/php/etc --with-zlib-dir --with-freetype-dir --enable-mbstring --with-libxml-dir=/usr --enable-soap --enable-calendar --with-curl --with-mcrypt --with-zlib --with-gd --disable-rpath --enable-inline-optimization --with-bz2 --with-zlib --enable-sockets --enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex --enable-exif --enable-bcmath --with-mhash --enable-zip --with-pcre-regex --with-pdo-mysql --with-mysqli --with-mysql-sock=/var/run/mysqld/mysqld.sock --with-jpeg-dir=/usr --with-png-dir=/usr --enable-gd-native-ttf --with-openssl --with-fpm-user=http --with-fpm-group=http --enable-ftp --with-imap --with-imap-ssl --with-kerberos --with-gettext --with-xmlrpc --with-xsl --enable-opcache --enable-fpm # 最后 make \u0026amp;\u0026amp; sudo make install 如果出现 error: freetype-config not found. 错误\nfreetype-config脚本不再默认支持，而是替换成了pkg-config，用来管理CFLAGS和库。通过这些变更就知道，我们需要把php编译脚本中的freetype-config改成pkg-config。我们可以再configure中找到freetype-config,完成替换。\n致命错误：ft2build.h：没有那个文件或目录\n把/usr/include/freetype2/ft2build.h 复制到 php-7.1.23/ext/gd/\n配置 sudo cp /opt/php-7.1.23/etc/php-fpm.conf.default /opt/php-7.1.23/etc/php-fpm.conf sudo nano /opt/php-7.1.23/etc/php-fpm.d/www.conf 默认情况下，PHP-FPM在TCP套接字127.0.0.1:9000上侦听，二选一\nlisten = 127.0.0.1:9000 listen = /run/php-fpm/php7.0-fpm.sock 接下来，找到以下3行并取消注释。\nlisten.owner = http listen.group = http listen.mode = 0660 保存并关闭文件。接下来复制php.ini文件。\nsudo cp ~/php-7.1.23/php.ini-production /opt/php-7.0.26/etc/php.ini sudo nano /opt/php-7.1.23/etc/php.ini 修改php.ini 中的include_path\ninclude_path = \u0026#34;/opt/php-7.0.26/lib/php\u0026#34; 添加service启动 sudo nano /etc/systemd/system/php7.1-fpm.service 内容如下\n[Unit] Description=The PHP FastCGI Process Manager After=network.target [Service] Type=simple PIDFile=/run/php-fpm/php7.1-fpm.pid ExecStart=/opt/php-7.1.23/sbin/php-fpm --nodaemonize --fpm-config /opt/php-7.1.23/etc/php-fpm.conf ExecReload=/bin/kill -USR2 $MAINPID [Install] WantedBy=multi-user.target 启动php-fpm\nsystemctl start php7.1-fpm ","date":"2020-01-20T16:41:18+08:00","permalink":"https://twor.me/posts/linux_build_php/","tags":["Linux","PHP"],"title":"linux 编译安装php"},{"content":"使用宿主机nginx搭配docker多版本php。\ndocker 镜像获取 docker pull php:7.1-fpm 创建容器 docker run -d --name php -p 9056:9000 -v /srv/http:/var/www/html --privileged=true php:7.1-fpm #参数说明： -name php 容器名称为 `php` -p 9056:9000 宿主机的9056端口映射到容器的9000端口 -v /srv/http:/var/www/html 宿主机的 `/srv/http` 目录挂载到容器的 `/var/www/html` 目录下 宿主机Nginx 配置 server { listen 10064; set $base /var/www/html/member-benefits; root $base/backend/public; add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34;; add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34;; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34;; charset utf-8; index index.html index.htm index.php; location / { if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; } } location = /favicon.ico { access_log off; log_not_found off; } location = /robots.txt { access_log off; log_not_found off; } error_page 404 /index.php; location ~ \\.php(.*)$ { fastcgi_pass 127.0.0.1:9056; fastcgi_index index.php; fastcgi_split_path_info ^((?U).+\\.php)(/?.+)$; fastcgi_param SCRIPT_FILENAME /var/www/html/member-benefits/backend/public$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param REQUEST_URI $fastcgi_script_name$fastcgi_path_info; include fastcgi_params; } location ~ /\\.(?!well-known).* { deny all; } } 容器配置以及扩展安装 容器主要需要安装一些扩展和一些项目需要的东西\n扩展安装 进入容器\ndocker exec -it php /bin/bash gd #依赖 apt-get install -y build-essential libssl-dev zlib1g-dev libpng-dev libjpeg-dev libfreetype6-dev #指定目录 docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ #安装gd扩展 docker-php-ext-install gd mysqli pdo-mysql zip \u0026hellip; docker-php-ext-install pdo pdo_mysql mysqli ","date":"2019-10-18T16:32:25+08:00","permalink":"https://twor.me/posts/docker_php/","tags":["Docker.PHP"],"title":"Docker：宿主机Nginx访问docker中的php"},{"content":"在开发的时候，为了测试数据，总会连接一些数据库、服务器、API之类，提交的时候就会不小心泄漏我们的SSH key、密码或者token之类的东西，所以有必要掌握 Git删除隐私。\n删除隐私 错误的做法：如果发现不小心上传了隐私信息，修改或删除相应的文件 原因：git是可以查看历史提交的，所以只需要查看历史提交，相应的隐私信息还是会暴露\n删厍？当我没说\ngit filter-branch 所有的历史记录中删除某个文件/文件夹 yourfilepath 就是需要删除的那个文件/文件夹\n$ git filter-branch --force --index-filter \u0026#39;git rm -r --cached --ignore-unmatch yourfilepath\u0026#39; --prune-empty --tag-name-filter cat -- --all $ git push origin master --force 此时再看看 git log 应该是没有该文件的信息了。\n请参考：https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository\n同步fork代码 clone fork的分支到本地\n$ git clone git@github.com:*/flutter.git 增加源分支(被自己fork的项目)地址到自己git项目远程分支列表中，将原来的仓库命名为upstream\n$ git remote add upstream git@github.com:flutter/flutter.git 核实远程分支列表（optional）\n$ git remote -v origin git@github.com:*/flutter.git (fetch) origin git@github.com:*/flutter.git (push) upstream git@github.com:flutter/flutter.git (fetch) upstream git@github.com:flutter/flutter.git (push) ## 核实后，发现不如意，想删除，可以用 git remote remove name ## name 为远程分支的命名，如上面例子，可以删除 upstream ## git remote remove upstream ## 或者直接删除之前fork的原始分支 origin ## git remote remove origin (直接删除了原始分支后，再fork， ## 也能达到更新了最新代码的需求，后面的步骤就不用了。) fetch源分支的新版本到本地\n$ git fetch upstream 合并两个版本的代码\n$ git merge upstream/master 将合并后的代码push到github上自己的fork中去\n$ git push origin master ## 如果要强制： ## git push origin --force pull request 提交更改 $ git add \u0026#39;filename\u0026#39; $ git commit -m \u0026#39;text\u0026#39; $ git push origin master 发起pull request ## 需要安装 Github CLI $ gh pr create Creating pull request for master into master in Twor/dotfile ! warning: could not compute title or body defaults: could not find any commits between master and master ? Title zh_CN ## 填写你提交的内容 ? Body \u0026lt;Received\u0026gt; ## 说明 ? What\u0026#39;s next? [Use arrows to move, type to filter] \u0026gt; Submit Continue in browser Add metadata Cancel // ..... merge 查看pr的状态 $ gh pr status Relevant pull requests in Twor/dotfile Current branch There is no pull request associated with [master] Created by you #1 README.md [Catclerk:master] Requesting a code review from you You have no pull requests to review $ gh pr merge \u0026lt;ID\u0026gt; -m Notice: authentication required Press Enter to open github.com in your browser... Authentication complete. Press Enter to continue... ✔ Merged pull request #1 (README.md) ✔ Deleted branch master 小坑： Github CLI 还不支持多用户，当你要切换用户时，去删除配置文件 .config/gh/hosts.yml 里面的内容 。\n还可以查看issue等等其他操作\ngh issue list gh issue view //但是这会在浏览器打开 更多命令：https://cli.github.com/manual/\n","date":"2019-06-05T13:58:53+08:00","permalink":"https://twor.me/posts/git_bash_tip/","tags":["Linux","git"],"title":"Git命令进阶—删除隐私 同步fork pull request 和merge"},{"content":"安装 zsh oh-my-zsh-git pacaur -S zsh oh-my-zsh-git 修改用户shell chsh -l chsh -s /usr/bin/zsh 安装Powerlevel9k 主题 $ sudo git clone https://github.com/bhilburn/powerlevel9k.git /usr/share/oh-my-zsh/themes/powerlevel9k 安装Nerd Fonts Hack字体 pacaur -S nerd-fonts-hack .zshrc 配置（copy） # Path to your oh-my-zsh installation. ZSH=/usr/share/oh-my-zsh/ export DEFAULT_USER=\u0026#34;fernando\u0026#34; export TERM=\u0026#34;xterm-256color\u0026#34; export ZSH=/usr/share/oh-my-zsh ZSH_THEME=\u0026#34;powerlevel9k/powerlevel9k\u0026#34; POWERLEVEL9K_MODE=\u0026#34;nerdfont-complete\u0026#34; source $ZSH/themes/powerlevel9k/powerlevel9k.zsh-theme POWERLEVEL9K_FOLDER_ICON=\u0026#34;\u0026#34; POWERLEVEL9K_HOME_SUB_ICON=\u0026#34;$(print_icon \u0026#34;HOME_ICON\u0026#34;)\u0026#34; POWERLEVEL9K_DIR_PATH_SEPARATOR=\u0026#34; $(print_icon \u0026#34;LEFT_SUBSEGMENT_SEPARATOR\u0026#34;) \u0026#34; POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0 POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER=true POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=\u0026#39;black\u0026#39; POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND=\u0026#39;178\u0026#39; POWERLEVEL9K_NVM_BACKGROUND=\u0026#34;238\u0026#34; POWERLEVEL9K_NVM_FOREGROUND=\u0026#34;green\u0026#34; POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND=\u0026#34;blue\u0026#34; POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND=\u0026#34;015\u0026#34; POWERLEVEL9K_TIME_BACKGROUND=\u0026#39;255\u0026#39; #POWERLEVEL9K_COMMAND_TIME_FOREGROUND=\u0026#39;gray\u0026#39; POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=\u0026#39;245\u0026#39; POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=\u0026#39;black\u0026#39; POWERLEVEL9K_TIME_FORMAT=\u0026#34;%D{%H:%M}\u0026#34; POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator context dir dir_writable vcs) POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs command_execution_time time) POWERLEVEL9K_SHOW_CHANGESET=true HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # /!\\ do not use with zsh-autosuggestions plugins=(archlinux asdf bundler docker jsontools vscode web-search k tig gitfast colored-man-pages colorize command-not-found cp dirhistory autojump sudo zsh-syntax-highlighting) # /!\\ zsh-syntax-highlighting and then zsh-autosuggestions must be at the end source $ZSH/oh-my-zsh.sh ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor) typeset -gA ZSH_HIGHLIGHT_STYLES ZSH_HIGHLIGHT_STYLES[cursor]=\u0026#39;bold\u0026#39; ZSH_HIGHLIGHT_STYLES[alias]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[suffix-alias]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[builtin]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[function]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[command]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[precommand]=\u0026#39;fg=green,bold\u0026#39; ZSH_HIGHLIGHT_STYLES[hashed-command]=\u0026#39;fg=green,bold\u0026#39; rule () { print -Pn \u0026#39;%F{blue}\u0026#39; local columns=$(tput cols) for ((i=1; i\u0026lt;=columns; i++)); do printf \u0026#34;\\u2588\u0026#34; done print -P \u0026#39;%f\u0026#39; } function _my_clear() { echo rule zle clear-screen } zle -N _my_clear bindkey \u0026#39;^l\u0026#39; _my_clear # Ctrl-O opens zsh at the current location, and on exit, cd into ranger\u0026#39;s last location. ranger-cd() { tempfile=$(mktemp) ranger --choosedir=\u0026#34;$tempfile\u0026#34; \u0026#34;${@:-$(pwd)}\u0026#34; \u0026lt; $TTY test -f \u0026#34;$tempfile\u0026#34; \u0026amp;\u0026amp; if [ \u0026#34;$(cat -- \u0026#34;$tempfile\u0026#34;)\u0026#34; != \u0026#34;$(echo -n `pwd`)\u0026#34; ]; then cd -- \u0026#34;$(cat \u0026#34;$tempfile\u0026#34;)\u0026#34; fi rm -f -- \u0026#34;$tempfile\u0026#34; # hacky way of transferring over previous command and updating the screen VISUAL=true zle edit-command-line } zle -N ranger-cd bindkey \u0026#39;^o\u0026#39; ranger-cd # Uncomment the following line to disable bi-weekly auto-update checks. DISABLE_AUTO_UPDATE=\u0026#34;true\u0026#34; ZSH_CACHE_DIR=$HOME/.cache/oh-my-zsh if [[ ! -d $ZSH_CACHE_DIR ]]; then mkdir $ZSH_CACHE_DIR fi source $ZSH/oh-my-zsh.sh 添加插件配置 plugins=(archlinux asdf bundler docker jsontools vscode web-search k tig gitfast colored-man colorize command-not-found cp dirhistory autojump sudo zsh-syntax-highlighting) vscode终端乱码 修改配置文件 \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;\u0026#39;Source Code Pro for Powerline\u0026#39;, \u0026#39;Hack Nerd Font\u0026#39;\u0026#34; ","date":"2019-06-05T13:58:53+08:00","permalink":"https://twor.me/posts/oh-my-zsh_config/","tags":["Linux","zsh","Oh-my-zsh"],"title":"Oh-my-zsh 配置美化（vscode乱码解决）"},{"content":"安装配置Git服务端 $ sudo yum install git $ sudo adduser git $ su git $ cd $ mkdir .ssh \u0026amp;\u0026amp; chmod 700 .ssh $ touch .ssh/authorized_keys \u0026amp;\u0026amp; chmod 600 .ssh/authorized_keys 写入SSH公匙 接着，我们需要为系统用户 git 的 authorized_keys 文件添加一些开发者 SSH 公钥。\n$ vim .ssh/authorized_keys $ #写入SSH公匙 创建仓库 现在我们来为开发者新建一个空仓库。可以借助带 --bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录：\n$ cd /srv/git $ mkdir project.git $ cd project.git $ git init --bare Initialized empty Git repository in /srv/git/project.git/ 禁用git用户shell登录 需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 /etc/passwd 文件中（git 用户所对应）的 shell 值。\n借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。 该工具随 Git 软件包一同提供。如果将 git-shell 设置为用户 git 的登录 shell（login shell）， 那么该用户便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为该用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 的完整路径名已存在于 /etc/shells 文件中：\n$ cat /etc/shells # see if git-shell is already in there. If not... $ which git-shell # make sure git-shell is installed on your system. $ sudo -e /etc/shells # and add the path to git-shell from last command 现在你可以使用 chsh \u0026lt;username\u0026gt; -s \u0026lt;shell\u0026gt; 命令修改任一系统用户的 shell：\n$ sudo chsh git -s $(which git-shell) #如果提示没有chsh这个命令，可以去/etc/passwd将目标用户的bash shell更改为所需的内容，或者安装util-linux-user这个包 这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样：\n$ ssh git@gitserver fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access. Connection to gitserver closed. 此时，用户仍可通过 SSH 端口转发来访问任何可达的 git 服务器。 如果你想要避免它，可编辑 authorized_keys 文件并在所有想要限制的公钥之前添加以下选项：\nno-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty 其结果如下：\n$ cat ~/.ssh/authorized_keys no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC 现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的主目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。\n利用git push向服务器一键部署代码 进入我们创建的项目仓库\n$ cd /srv/git/project.git $ cd hooks $ vim post-receive 写入如下代码：\n#!/bin/sh git --work-tree=/srv/web/xxx.com checkout -f master #这个目录是代码存放目录不是仓库目录 echo \u0026#34;The project has been successfully deployed to this server!\u0026#34; $ chmod +x post-receive 这个挂钩本质是一个脚本，当这个文件在repo/hooks/文件夹内，名字为 post-receive 并且linux的x属性（可执行）为真的时候，git会在收到push后执行它\nOK！现在上传的代码会在 /srv/web/xxx.com 这个目录里面看见，我们只需要把网站根目录设置在这里就可以了\n","date":"2019-06-05T09:58:53+08:00","permalink":"https://twor.me/posts/git_auto_web/","tags":["Linux","Git","Web"],"title":"Git 自动化部署网站"},{"content":"写在前面 Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。\nComposer 不是一个包管理器。是的，它涉及 \u0026ldquo;packages\u0026rdquo; 和 \u0026ldquo;libraries\u0026rdquo;，但它在每个项目的基础上进行管理，在你项目的某个目录中（例如 vendor）进行安装。默认情况下它不会在全局安装任何东西。因此，这仅仅是一个依赖管理。\n运行 Composer 需要 PHP 5.3.2+ 以上版本。一些敏感的 PHP 设置和编译标志也是必须的，但对于任何不兼容项安装程序都会抛出警告。\n我们将从包的来源直接安装，而不是简单的下载 zip 文件，你需要 git 、 svn 或者 hg ，这取决于你载入的包所使用的版本管理系统\n安装Composer $ curl -sS https://getcomposer.org/installer | php $ sudo mv composer.phar /usr/local/bin/composer #archlinux #sudo pacman -S composer 修改Composer镜像源 #中国全量镜像 $ composer config -g repo.packagist composer https://packagist.phpcomposer.com #阿里云全量镜像 $ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ #解除镜象 $ composer config -g --unset repos.packagist Composer使用 包的安装、更新下载和依赖 #如有 composer.lock 文件，直接安装，否则从 composer.json 安装最新扩展包和依赖； $ composer install #从 composer.json 安装最新扩展包和依赖； $ composer update #从 composer.json 或者对应包的配置，并更新到最新； $ composer update vendor/package #添加安装 new/package, 可以指定版本，如： composer require new/package ~2.5. $ composer require new/package 扩展包查找和查看 当我们需要找一个扩展包，可以去packagist官网查找\n官网：https://packagist.org/\n或者使用命令\n#查找扩展包 monolog $ composer search monolog #显示本地安装的扩展包 $ composer show -i 其他常用命令 # 查看show命令的帮助文档 $ composer show -h #创建项目 #如果该目录目前不存在，则会在安装过程中自动创建。也可以指定文件项目目录 $ composer create-project doctrine/orm path 2.2.* #优化自动加载，安装包的时候可以同样使用--optimize-autoloader。 #不加这一选项，你可能会发现20%到25%的性能损失。 $ composer dump-autoload --optimize #全局安装 $ composer global require fabpot/php-cs-fixer:dev-master #全局更新 $ composer global update #依赖检测 $ composer depends --link-type=require monolog/monolog 使用扩展包 对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。\nrequire __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Curl\\Curl; $curl = new Curl(); $curl-\u0026gt;get(); //... 这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 Curl，你就可以像这样开始使用这个类库，并且他们将被自动加载。\n注意： Composer 提供了自己的 autoloader。如果你不想使用它，你可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的 autoloader。\n","date":"2019-06-01T16:20:55+08:00","permalink":"https://twor.me/posts/php_composer/","tags":["PHP","Composer"],"title":"Composer 基本使用"},{"content":"环境准备 Nginx\nphp\nwinsw\n安装Ngixn服务 把下载的winsw放入ngixn安装文件夹，重命名为nginx-service.exe,新建nginx-service.xml,写入配置\n\u0026lt;service\u0026gt; \u0026lt;id\u0026gt;nginxsvc\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nginx\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Nginx Web Server service.\u0026lt;/description\u0026gt; \u0026lt;executable\u0026gt;c:\\nginx\\nginx.exe\u0026lt;/executable\u0026gt; \u0026lt;logpath\u0026gt;c:\\nginx\\logs\\\u0026lt;/logpath\u0026gt; \u0026lt;logmode\u0026gt;roll\u0026lt;/logmode\u0026gt; \u0026lt;depend\u0026gt;phpsvc\u0026lt;/depend\u0026gt; \u0026lt;startargument\u0026gt;-p\u0026lt;/startargument\u0026gt; \u0026lt;startargument\u0026gt;c:\\nginx\u0026lt;/startargument\u0026gt; \u0026lt;stopexecutable\u0026gt;c:\\nginx\\nginx.exe\u0026lt;/stopexecutable\u0026gt; \u0026lt;stopargument\u0026gt;-p\u0026lt;/stopargument\u0026gt; \u0026lt;stopargument\u0026gt;c:\\nginx\u0026lt;/stopargument\u0026gt; \u0026lt;stopargument\u0026gt;-s\u0026lt;/stopargument\u0026gt; \u0026lt;stopargument\u0026gt;stop\u0026lt;/stopargument\u0026gt; \u0026lt;/service\u0026gt; 以管理员身份打开cmd，运行\ncd \\c:\\svc\\nginx nginx-service.exe install 安装PHP服务\nwinsw改为php-service.exe,放入php安装文件夹，写入配置php-service.xml\n\u0026lt;service\u0026gt; \u0026lt;id\u0026gt;phpsvc\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;PHP\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;PHP-FCGI service.\u0026lt;/description\u0026gt; \u0026lt;executable\u0026gt;c:\\php\\php-cgi.exe\u0026lt;/executable\u0026gt; \u0026lt;logpath\u0026gt;c:\\php\\logs\\\u0026lt;/logpath\u0026gt; \u0026lt;logmode\u0026gt;roll\u0026lt;/logmode\u0026gt; \u0026lt;depend\u0026gt;\u0026lt;/depend\u0026gt; \u0026lt;startargument\u0026gt;-b\u0026lt;/startargument\u0026gt; \u0026lt;startargument\u0026gt;127.0.0.1:9123\u0026lt;/startargument\u0026gt; \u0026lt;startargument\u0026gt;-c\u0026lt;/startargument\u0026gt; \u0026lt;startargument\u0026gt;C:\\php\\php.ini\u0026lt;/startargument\u0026gt; \u0026lt;/service\u0026gt; 以管理员身份打开cmd，运行\ncd \\c:\\svc\\php php-service.exe install 修改nginx.conf\nworker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; location / { root html; index index.php index.html index.htm; } location ~ \\.php$ { fastcgi_pass 127.0.0.1:9123; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } } ","date":"2019-05-05T13:58:53+08:00","permalink":"https://twor.me/posts/windows_nginx_php/","tags":["Linux","zsh","Oh-my-zsh"],"title":"Windows上安装ngixn php并添加服务自启动"},{"content":"开启wsl Windows功能 \u0026raquo; 勾选适用于Linux的Windows子系统 ，重启生效。\n下载安装 Arch WSL 这里是作者的安装教程：https://github.com/yuk7/ArchWSL/wiki\n我选择的是传统方式安装 (不使用 AppX 方式)：\n在 Release 下载最新版的 Arch.zip 解压到 C 盘根目录，(一定要在 C 盘，其他位置也可以)，但是你要有该目录的读写权限，所以不能放到 Program Files 等目录中。 双击解压好的 Arch.exe 进行安装，这个 .exe 的名字 就是要创建的 WSL 实例的名字，改不同的名字就能创建多个 Arch WSL。 安装好之后，进行配置。\nArch Linux 软件仓库国内镜像 编辑 /etc/pacman.d/mirrorlist，里面有注释了的 China 的镜像，（放在上面优先级高）\n然后更新软件包缓存，执行： pacman -Syyu\n其他跟镜像有关的可以看这里：https://wiki.archlinux.org/index.php/Mirrors_(简体中文)\n添加 ArchlinuxCN 源 Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体 / 美化包等。官方仓库地址：http://repo.archlinuxcn.org\n使用方法：在 /etc/pacman.conf 文件末尾添加以下两行：\n[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 之后安装 archlinuxcn-keyring 包导入 GPG key:\npacman-key --init pacman-key --populate pacman -Syy \u0026amp;\u0026amp; pacman -S archlinuxcn-keyring 安装 AUR 助手 yay Arch User Repository（常被称作 AUR），是一个为 Arch 用户而生的社区驱动软件仓库。Debian/Ubuntu 用户的对应类比是 PPA。AUR 包含了不直接被 Arch Linux 官方所背书的软件。如果有人想在 Arch 上发布软件或者包，它可以通过这个社区仓库提供。这让最终用户们可以使用到比默认仓库里更多的软件。所以你该如何使用 AUR 呢？简单来说，你需要另外的工具以从 AUR 中安装软件。Arch 的包管理器 pacman 不直接支持 AUR。那些支持 AUR 的 “特殊工具” 我们称之为 AUR 助手。\n我们想从 AUR 仓库中安装东西时，就需要 AUR 助手，这里推荐 yay.\npacman -S yay 安装完 yay，git 也会被一起装好。换成国内 AUR 源:\n##yay --save --aururl \u0026#34;地址\u0026#34; yay --save --aururl https://aur.tuna.tsinghua.edu.cn yay 的配置文件路径： ~/.config/yay/config.json\n创建 Arch 普通用户 刚安装好的 Arch 是 root 用户，为了不至于权限太大误伤系统，可以先创建一个普通用户。\n添加一个用户：\nuseradd -m -G wheel twor 设置用户密码：\npasswd twor 在下一步之前，要先把默认编辑器设置成 vim，因为用不来默认的 vi…\nexport EDITOR=vim 你也可以设置成自己喜欢的编辑器。让用户可以执行 sudo 命令，这一步不能省略。使用如下系统自带命令修改 sudoers 文件。\nvisudo 在里面注销注释（删除前面的#）这一行即可：\n%wheel ALL=(ALL) ALL 切换 WSL 默认用户 在 cmd 中打开你的安装目录：\n执行：\nArch.exe config --default-user artin 配置基本环境 安装 fakeroot、binutils 等打包基本工具\npacman -S base-devel 我这里会提示 fakeroot 被 ignore 了，选 n然后回车就好了，不输入数字的话默认会安装 base-devel 里的所有包。\n安装i3 sudo pacman -S i3 这里你可以选择All或者你需要的\n配置i3 这里就不说了，不会的自己去教程吧\n配置archlinux（wsl）图形化 下载vcxsrv并安装（也可以使用其他Windows X Server）\n创建连接脚本\nmkdir .script vim .script/xlaunch 写入：\n#!/bin/bash # meant to be run with `bash -c \u0026#34;/path/to/xlaunch\u0026#34;` when running from e.g. a Windows shortcut # explicitly needed when launching with bash -c from Windows export DISPLAY=:0 #export LIBGL_ALWAYS_INDIRECT=0 source ~/.bashrc #xrandr --dpi 279 i3 赋予执行权限\nchmod +x .script/xlaunch 然后在Windows下创建一个脚本 Archlinux.vbs\n\u0026#39; vcxsrv所在路径 C:\\Program Files\\VcXsrv\\vcxsrv.exe \u0026#39; arch.exe 所在路径 C:\\Arch\\Arch.exe \u0026#39; achlinux连接脚本所在路径 ~/.scripts/wlaunch Set shell = CreateObject(\u0026#34;WScript.Shell\u0026#34; ) shell.Run \u0026#34;\u0026#34;\u0026#34;C:\\Program Files\\VcXsrv\\vcxsrv.exe\u0026#34;\u0026#34; :0 -screen 0 @1 -nodecoration -wgl\u0026#34; shell.Run \u0026#34;C:\\Arch\\Arch.exe run \u0026#34;\u0026#34;~/.scripts/wlaunch\u0026#34;\u0026#34;\u0026#34;, 0 双击运行Archlinux.vbs 就可以连接上了\n大功告成！\noh-my-zsh Polybar \u0026hellip; 剩下的自己折腾吧！\n提示 i3在配置的时候建议使用alt键，因为Windows的win键被Windows自身热键占用 Windows的文件（C盘D盘\u0026hellip;）在 /mnt 文件夹内 重新尝试安装（重置archlinux）wsl --unregister Arch 或者完全卸载wsl lxrun /uninstall /full 以后补充 ","date":"2019-03-05T13:58:53+08:00","permalink":"https://twor.me/posts/wsl_archlinux_gui/","tags":["Linux","Windows","WSL"],"title":"WSL(Windows Subsystem for Linux)安装archlinux，并配置图形化界面"},{"content":" 设置用户信息 git config --global user.email \u0026#34;840833458@qq.com\u0026#34; //这是设置邮箱 git config --global user.name \u0026#34;Twor\u0026#34; //这是设置用户名 设置gitee ssh-keygen -t rsa -C \u0026#34;840833458@qq.com\u0026#34; //生成密钥 然后把生成在 用户文件夹 下 .ssh/xxxxx.pub 的文件内容复制到 gitee 添加ssh key 的地方\nssh -T git@gitee.com //测试连接 Hi twor! You\u0026rsquo;ve successfully authenticated, but GITEE.COM does not provide shell access. //输出这样内容就表示成功了\ngit 操作 git add . // 表示把所有修改和添加的内容添加到暂缓区 git commit -m \u0026#34;这是twor修改的东西\u0026#34; //表示提交暂缓区的内容并添加备注 git push origin master //推送提交到 远程 master 分支 git pull origin master //拉取远程 master 分支到本地 git将当前修改提交至其他分支 在没有进行commit之前可以进行一下操作\n1、通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改 git stash 2、然后切换至B分支 git checkout B 3、从git栈中获取到最近一次stash进去的内容，恢复工作区的内容，获取之后，会删除栈中对应的stash git stash pop 4、在进行正常的提交代码步骤即可 git add /src/main/.. 5、git commit -m \u0026ldquo;功能开发\u0026rdquo; 6、git pull origin 分支名称 7、git push origin 分支名称\ngit commit之后，想撤销commit git reset \u0026ndash;soft HEAD^\n至于这几个参数： \u0026ndash;mixed 意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作 这个为默认参数,git reset \u0026ndash;mixed HEAD^ 和 git reset HEAD^ 效果是一样的。\n\u0026ndash;soft 不删除工作空间改动代码，撤销commit，不撤销git add .\n\u0026ndash;hard 删除工作空间改动代码，撤销commit，撤销git add .\n注意完成这个操作后，就恢复到了上一次的commit状态。\n顺便说一下，如果commit注释写错了，只是想改一下注释，只需要： git commit \u0026ndash;amend\n此时会进入默认vim编辑器，修改注释完毕后保存就好了。\n","date":"2018-10-18T16:49:37+08:00","permalink":"https://twor.me/posts/git_note/","tags":["Git"],"title":"git 笔记"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://twor.me/search/","tags":null,"title":"Search Results"},{"content":"Twor ","date":"0001-01-01T00:00:00Z","permalink":"https://twor.me/about/","tags":null,"title":"关于"}]